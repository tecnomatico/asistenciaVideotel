/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package co.tecnomati.java.asistenciavideotel.vista.marcacion;

import co.tecnomati.java.asistenciavideotel.cons.Constantes;
import co.tecnomati.java.asistenciavideotel.dominio.Asistencia;
import co.tecnomati.java.asistenciavideotel.dominio.Comentario;
import co.tecnomati.java.asistenciavideotel.dominio.Diatrabajo;
import co.tecnomati.java.asistenciavideotel.dominio.Empleado;
import co.tecnomati.java.asistenciavideotel.dominio.Horario;
import co.tecnomati.java.asistenciavideotel.dominio.Marcacion;
import co.tecnomati.java.asistenciavideotel.dominio.Turno;
import co.tecnomati.java.asistenciavideotel.dominio.dao.imp.AsistenciaDaoImp;
import co.tecnomati.java.asistenciavideotel.dominio.dao.imp.ComentarioDaoImp;
import co.tecnomati.java.asistenciavideotel.dominio.dao.imp.DiaTrabajoDaoImp;
import co.tecnomati.java.asistenciavideotel.dominio.dao.imp.EmpleadoDaoImp;
import co.tecnomati.java.asistenciavideotel.dominio.dao.imp.MarcacionDaoImp;
import co.tecnomati.java.asistenciavideotel.dominio.dao.imp.TurnoDaoImp;
import co.tecnomati.java.asistenciavideotel.util.FechaUtil;
import co.tecnomati.java.asistenciavideotel.util.FiltroUtil;
import co.tecnomati.java.asistenciavideotel.util.MiJoptionPane;
import co.tecnomati.java.asistenciavideotel.util.camara.JmfVideoUtil;
import co.tecnomati.java.asistenciavideotel.util.camara.miPlayer;
import co.tecnomati.java.asistenciavideotel.vista.administrador.GUILogin;
import co.tecnomati.java.asistenciavideotel.vista.asistencia.GUIGestorAsistencia;
import co.tecnomati.java.asistenciavideotel.vista.comentario.GUIGestorComentario;
import co.tecnomati.java.asistenciavideotel.vista.turno.GUIDiaTrabajo;
import co.tecnomati.java.asistenciavideotel.vista.empleado.GUIEmpleado;
import co.tecnomati.java.asistenciavideotel.vista.empleado.GUIGestorEmpleado;
import co.tecnomati.java.asistenciavideotel.vista.empresa.GUIEmpresa;
import co.tecnomati.java.asistenciavideotel.vista.horario.GUIHorario;
import co.tecnomati.java.asistenciavideotel.vista.sector.GUIGestorSector;
import com.sun.media.Log;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.File;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.media.Player;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author joel
 */
public class GUIMarcacion extends javax.swing.JFrame {

    public static final int ALTA = 0;
    public static final int MODIFICAR = 1;
    public static final byte MARCACION_ENTRADA = 1;
    public static final byte MARCACION_SALIDA = 0;
    public static final byte EXTRA_MARCACION_ADICIONAL_EN_EL_DIA = 2;
    public static final byte EXTRA_MARCACION_DIA_NO_REGISTRADA = 3;
    public static final byte ETI_MARCACION_INCOMPLETA = 0;
    public static final byte ETI_MARCACION_NORMAL = 1;
    public static final byte ETI_MARCACION_EXTRA = 2;
    public static final byte ETI_MARCACION_AUSENTE = 3;
    public static final byte ETI_EXTRA_MARCACION = 0;
    public static final byte ETI_EXTRA_DIA = 1;
    // tipo de motibos de horas extra
    public static String MOTIVO_HS_EXTRA = "HS EXTRA";
    public static String MOTIVO_TARDANZA = "TARDANZA";
    JmfVideoUtil b = new JmfVideoUtil();
    private Player p1;
    int opc;
    int opcMarcacion;
    int indexMotivo;
    boolean extraM;
    // 
    Date fechaHoy;
    Empleado empleado;
    Diatrabajo diaTrabajo;
    Horario horario;
    Turno turno;
    Asistencia asistencia;
    Marcacion marcacion;

    public GUIMarcacion() {
        initComponents();
        initComponents2();
        txtDni.requestFocus();
        txtDni.setText("");
        this.setTitle(Constantes.TITLE_APP);
        this.setLocationRelativeTo(this);
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        panelPadre = new javax.swing.JPanel();
        panelInicio = new javax.swing.JPanel();
        lblFecha = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        panelCam = new javax.swing.JPanel();
        clockDigital1 = new org.edisoncor.gui.varios.ClockDigital();
        jLabel2 = new javax.swing.JLabel();
        txtDni = new javax.swing.JTextField();
        lblNameSistema = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuInicio = new javax.swing.JMenu();
        mnuItmIniciarSesion = new javax.swing.JMenuItem();
        mnuItmCerrarSesion = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        mnuItmSalir = new javax.swing.JMenuItem();
        mnuEmpleado = new javax.swing.JMenu();
        mnuItmAltaEmpleado = new javax.swing.JMenuItem();
        mnuItmGestorEmpleado = new javax.swing.JMenuItem();
        mnuItmEmpresa = new javax.swing.JMenu();
        mnuItmConfigEmpresa = new javax.swing.JMenuItem();
        mnuItmGestorSector = new javax.swing.JMenuItem();
        mnuHorario = new javax.swing.JMenu();
        mnuItmHorario = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        mnuItmComentarios = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();
        mnuItmAcerca = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        jMenu3.setText("jMenu3");

        jMenu4.setText("jMenu4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(700, 600));
        setResizable(false);

        panelInicio.setPreferredSize(new java.awt.Dimension(666, 542));

        lblFecha.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblFecha.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFecha.setText("Marte 8 de agosto de 2014");

        panelCam.setBackground(new java.awt.Color(0, 0, 0));
        panelCam.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panelCam.setMaximumSize(new java.awt.Dimension(400, 400));
        panelCam.setMinimumSize(new java.awt.Dimension(400, 400));

        javax.swing.GroupLayout panelCamLayout = new javax.swing.GroupLayout(panelCam);
        panelCam.setLayout(panelCamLayout);
        panelCamLayout.setHorizontalGroup(
            panelCamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 398, Short.MAX_VALUE)
        );
        panelCamLayout.setVerticalGroup(
            panelCamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 398, Short.MAX_VALUE)
        );

        clockDigital1.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 36)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("id");

        txtDni.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        txtDni.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtDni.setText("32369235");
        txtDni.setMaximumSize(new java.awt.Dimension(94, 28));
        txtDni.setMinimumSize(new java.awt.Dimension(94, 28));
        txtDni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDniActionPerformed(evt);
            }
        });
        txtDni.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDniKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDniKeyTyped(evt);
            }
        });

        lblNameSistema.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblNameSistema.setText("Sistema de Control de Asistencia ");

        javax.swing.GroupLayout panelInicioLayout = new javax.swing.GroupLayout(panelInicio);
        panelInicio.setLayout(panelInicioLayout);
        panelInicioLayout.setHorizontalGroup(
            panelInicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInicioLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelInicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblFecha, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelInicioLayout.createSequentialGroup()
                        .addGroup(panelInicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelInicioLayout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtDni, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(clockDigital1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addGroup(panelInicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblNameSistema, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(panelCam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jSeparator1))
                .addContainerGap())
        );
        panelInicioLayout.setVerticalGroup(
            panelInicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInicioLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(panelInicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelInicioLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(panelCam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelInicioLayout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(clockDigital1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53)
                        .addGroup(panelInicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDni, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(454, 454, 454)
                .addComponent(lblNameSistema)
                .addContainerGap())
        );

        javax.swing.GroupLayout panelPadreLayout = new javax.swing.GroupLayout(panelPadre);
        panelPadre.setLayout(panelPadreLayout);
        panelPadreLayout.setHorizontalGroup(
            panelPadreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPadreLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelInicio, javax.swing.GroupLayout.DEFAULT_SIZE, 662, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelPadreLayout.setVerticalGroup(
            panelPadreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPadreLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        mnuInicio.setText("Inicio");

        mnuItmIniciarSesion.setText("Iniciar Sesion");
        mnuItmIniciarSesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuItmIniciarSesionActionPerformed(evt);
            }
        });
        mnuInicio.add(mnuItmIniciarSesion);

        mnuItmCerrarSesion.setText("Cerrar Sesion");
        mnuItmCerrarSesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuItmCerrarSesionActionPerformed(evt);
            }
        });
        mnuInicio.add(mnuItmCerrarSesion);
        mnuInicio.add(jSeparator2);

        mnuItmSalir.setText("Salir");
        mnuItmSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuItmSalirActionPerformed(evt);
            }
        });
        mnuInicio.add(mnuItmSalir);

        jMenuBar1.add(mnuInicio);

        mnuEmpleado.setText("Empleado");

        mnuItmAltaEmpleado.setText("Alta Empleado");
        mnuItmAltaEmpleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuItmAltaEmpleadoActionPerformed(evt);
            }
        });
        mnuEmpleado.add(mnuItmAltaEmpleado);

        mnuItmGestorEmpleado.setText("Gestor Empleado");
        mnuItmGestorEmpleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuItmGestorEmpleadoActionPerformed(evt);
            }
        });
        mnuEmpleado.add(mnuItmGestorEmpleado);

        jMenuBar1.add(mnuEmpleado);

        mnuItmEmpresa.setText("Empresa");

        mnuItmConfigEmpresa.setText("Configuracion Empresa");
        mnuItmConfigEmpresa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuItmConfigEmpresaActionPerformed(evt);
            }
        });
        mnuItmEmpresa.add(mnuItmConfigEmpresa);

        mnuItmGestorSector.setText("Sectores de Empresa");
        mnuItmGestorSector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuItmGestorSectorActionPerformed(evt);
            }
        });
        mnuItmEmpresa.add(mnuItmGestorSector);

        jMenuBar1.add(mnuItmEmpresa);

        mnuHorario.setText("Horario");

        mnuItmHorario.setText("Horarios");
        mnuItmHorario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuItmHorarioActionPerformed(evt);
            }
        });
        mnuHorario.add(mnuItmHorario);

        jMenuBar1.add(mnuHorario);

        jMenu1.setText("Asistencia");

        jMenuItem2.setText("GestorAsistencia");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        mnuItmComentarios.setText("Gestor de Motivos Hs Extra");
        mnuItmComentarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuItmComentariosActionPerformed(evt);
            }
        });
        jMenu1.add(mnuItmComentarios);

        jMenuBar1.add(jMenu1);

        jMenu7.setText("Acerca");

        mnuItmAcerca.setText("Acerca");
        mnuItmAcerca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuItmAcercaActionPerformed(evt);
            }
        });
        jMenu7.add(mnuItmAcerca);

        jMenuBar1.add(jMenu7);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelPadre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(panelPadre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtDniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDniActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDniActionPerformed

    private void mnuItmAltaEmpleadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuItmAltaEmpleadoActionPerformed
        new GUIEmpleado(this, true);
    }//GEN-LAST:event_mnuItmAltaEmpleadoActionPerformed

    private void mnuItmConfigEmpresaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuItmConfigEmpresaActionPerformed
        new GUIEmpresa(this, true);
    }//GEN-LAST:event_mnuItmConfigEmpresaActionPerformed

    private void mnuItmGestorSectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuItmGestorSectorActionPerformed
        new GUIGestorSector(this, true);
    }//GEN-LAST:event_mnuItmGestorSectorActionPerformed

    private void mnuItmGestorEmpleadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuItmGestorEmpleadoActionPerformed
        new GUIGestorEmpleado(this, true);
    }//GEN-LAST:event_mnuItmGestorEmpleadoActionPerformed

    private void mnuItmSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuItmSalirActionPerformed
        System.exit(0);
    }//GEN-LAST:event_mnuItmSalirActionPerformed

    private void mnuItmIniciarSesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuItmIniciarSesionActionPerformed
        GUILogin login = new GUILogin(this, true);

        if (login.isValidoAdministrador()) {
            setconfigurarcionMenuAdministrador(true);
            setPaneldeControl(false);



        }
    }//GEN-LAST:event_mnuItmIniciarSesionActionPerformed

    private void mnuItmAcercaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuItmAcercaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mnuItmAcercaActionPerformed

    private void mnuItmCerrarSesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuItmCerrarSesionActionPerformed
        setconfigurarcionMenuAdministrador(false);
        setPaneldeControl(true);

    }//GEN-LAST:event_mnuItmCerrarSesionActionPerformed

    private void mnuItmHorarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuItmHorarioActionPerformed
        new GUIHorario(this, true);
    }//GEN-LAST:event_mnuItmHorarioActionPerformed

    private void txtDniKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDniKeyPressed
        // si presiono enter entonces hay quer registrar la marcacion
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            //
            fechaHoy = new Date();
            if (isValidoId()) {
                // es valido el identificador
                registrarMarcacion();

            }

            limpiarDatos();
        }
    }//GEN-LAST:event_txtDniKeyPressed

    private void txtDniKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDniKeyTyped
        FiltroUtil.permitirSoloNumero(evt, txtDni, 8);
    }//GEN-LAST:event_txtDniKeyTyped

    private void mnuItmComentariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuItmComentariosActionPerformed
        new GUIGestorComentario(this, true);
    }//GEN-LAST:event_mnuItmComentariosActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        GUIGestorAsistencia guiGestorAsistencia = new GUIGestorAsistencia(this, true);


    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIMarcacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIMarcacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIMarcacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIMarcacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUIMarcacion().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.edisoncor.gui.varios.ClockDigital clockDigital1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblNameSistema;
    private javax.swing.JMenu mnuEmpleado;
    private javax.swing.JMenu mnuHorario;
    private javax.swing.JMenu mnuInicio;
    private javax.swing.JMenuItem mnuItmAcerca;
    private javax.swing.JMenuItem mnuItmAltaEmpleado;
    private javax.swing.JMenuItem mnuItmCerrarSesion;
    private javax.swing.JMenuItem mnuItmComentarios;
    private javax.swing.JMenuItem mnuItmConfigEmpresa;
    private javax.swing.JMenu mnuItmEmpresa;
    private javax.swing.JMenuItem mnuItmGestorEmpleado;
    private javax.swing.JMenuItem mnuItmGestorSector;
    private javax.swing.JMenuItem mnuItmHorario;
    private javax.swing.JMenuItem mnuItmIniciarSesion;
    private javax.swing.JMenuItem mnuItmSalir;
    private javax.swing.JPanel panelCam;
    private javax.swing.JPanel panelInicio;
    private javax.swing.JPanel panelPadre;
    private javax.swing.JTextField txtDni;
    // End of variables declaration//GEN-END:variables

    /**
     *
     * Activa o desactiva de acuerdo al parametro qeu se el envie las opciones
     * de la barra de menu Esto es para activar o desactivar las opciones de
     * Administrador
     *
     * @param b
     */
    private void setconfigurarcionMenuAdministrador(boolean b) {

        // lo que siempre tienen que estar visibles
        mnuItmAcerca.setVisible(true);
        mnuItmSalir.setVisible(true);

        // mnu
        mnuHorario.setVisible(true);
        mnuEmpleado.setVisible(b);


        //mnu item
        mnuItmIniciarSesion.setVisible(!b);
        mnuItmCerrarSesion.setVisible(b);
        // mnuItmInciarControl.setVisible(b);
        mnuItmSalir.setVisible(true);

    }

    /**
     * Oculta o no el panel donde el empleado realiza sus maraciones.
     *
     * @param b
     */
    private void setPaneldeControl(boolean b) {
        panelInicio.setVisible(b);
    }

    public Player getPlayer() {
        return p1;
    }

    public void setPlayer(Player pin) {
        p1 = pin;
    }

    public JPanel getCamara() {
        return panelCam;
    }

    private void initComponents2() {
        //registramos los Oyentes de eventos
        eventos e = new eventos(this);
        addWindowListener(e);
        mnuItmEmpresa.addActionListener(e);
        //jmCBD.addActionListener(e);
        mnuItmSalir.addActionListener(e);
        mnuItmAcerca.addActionListener(e);
        //Cargamos en el menu los Dispositivos detectados
        // jDispositivos.menuDispositivos(this,jmDispositivos);
        lblFecha.setText(FechaUtil.getFecha_Dia_DD_De_MM_De_AAAA(new Date()));
        // agrego al panel  la camara de video
        try {
            panelCam.add(b.Componente());
        } catch (Exception nep) {
            JOptionPane.showMessageDialog(this, "La Conexion con la Camara FALLO, revise si su dispositivo esta conectado a la PC y  reincie la aplicacion ", "NO SE RECONOCE LA CAMARA", JOptionPane.INFORMATION_MESSAGE);
            System.exit(0);
        }
//        adaptarTamaño(lbliconEmpresa, new ImageIcon(getClass().getResource("/com/freelancersteam/www/java/tomafoto/images/iconTecnomatica.png")).getImage());
        lblNameSistema.setText(Constantes.TITLE_APP);
        setLocationRelativeTo(this); //centramos el formulario

    }

    /**
     *
     * @return devuelve true si el identificador ingresado pertenece a un
     * empleado. false si : esta vacio , incompleto o no existe el identificador
     * enla bd.
     */
    private boolean isValidoId() {
        boolean b = false;
        int longitud = txtDni.getText().trim().length();
        if (longitud > 0) {
            empleado = new EmpleadoDaoImp().getEmpleado_XDni(Integer.parseInt(txtDni.getText()));
            if (longitud > 6 && empleado != null) {
                // dni correcto
                b = true;
                Log.write("Valido el empleado  " + empleado.toString());
            } else {
                MiJoptionPane.mensajeError(this, "IDENTIFICADOR INCORRECTO");
            }
        }


        return b;

    }

    /**
     * registra la marcacion del empleado en el sistema.
     */
    private void registrarMarcacion() {

        if (isExistDiaTrabajo()) {


            // si trabaja en ese dia
            if (!isExistAsistenciaHoy()) {
                System.err.println("No existe  Asistenica de hoy");
                // no realizo ninguna marca entonces debo registrar    
                cargarOactualizarAsistencia(ALTA);

            } else {
//                System.err.println("n turno " + diaTrabajo.getNturno());
//                System.err.println("n turno " + asistencia.getNturno());
//                System.err.println("mcontador" + asistencia.getMcontador());
//                System.err.println("mcontador" + MARCACION_ENTRADA);
//                System.err.println("boolean " + ((asistencia.getNturno() == diaTrabajo.getNturno()) && (asistencia.getMcontador() == MARCACION_ENTRADA)));
//                System.err.println("b1" + (asistencia.getMcontador() == MARCACION_ENTRADA));
//                System.err.println("b2" + (asistencia.getNturno() == diaTrabajo.getNturno()));
                // ya tiene su asistencia del dia entonces actualizo las marcaciones 
                if ((asistencia.getNturno() < diaTrabajo.getNturno()) || ((asistencia.getNturno().equals(diaTrabajo.getNturno())) && (asistencia.getMcontador() == MARCACION_ENTRADA))) {
                    System.err.println("");
                    // numero de marcaciones de asistencia diaria es menor que la cantidad de turnos diarios 
                    System.err.println("Existe Asistenica de hoy");
                    cargarOactualizarAsistencia(MODIFICAR);
                } else {
                    // empleado registra una marcacion que no le corresponde en su dia
                    System.err.println("No se marca xq ya marco todas sus turnos diarios.");
                    extraM=true;
                    cargarOactualizarAsistencia(EXTRA_MARCACION_ADICIONAL_EN_EL_DIA);
                    
                }


            }
        } else {
            // no tiene asignado ese dia ,, se supone como extra.
            System.err.println("No tiene asignado un horario para este dia");
            cargarOactualizarAsistencia(EXTRA_MARCACION_DIA_NO_REGISTRADA);
           


        }



    }

    /**
     *
     * @return true si el empleado tiene asignado ese dia de trabajo
     */
    private boolean isExistDiaTrabajo() {
        boolean b = false;
        int idEmpleado = empleado.getEid();
        int idDia = FechaUtil.getDiaDeLaSemana(new Date());
        diaTrabajo = new DiaTrabajoDaoImp().getDiatrabajo_XDia(idDia, idEmpleado);
        if (diaTrabajo != null) {
            // comprobar cuantos minutos llego tarde
            b = true;
            Log.write("Dia Trabajo: Si trabajo hoy el Empleado " + diaTrabajo.toString());
        }
        return b;
    }

    /**
     *
     * @return True si el empleado marco una una Asistencia en el dia de hoy
     */
    private boolean isExistAsistenciaHoy() {
        boolean b = false;
        asistencia = new AsistenciaDaoImp().getAsistencia(empleado.getEid(), fechaHoy);
        if (asistencia != null) {

            b = true;
            System.err.println(" existe una asistencia  " + asistencia.toString());
        }
        return b;

    }

    /**
     *
     * @param op indica si se realiza una alta o actualizacion da de Alta o
     * Actuaaliza la Asistencia de acuerdo al parametro recibido
     */
    private void cargarOactualizarAsistencia(int op) {
        String dia = "";

        // almaceno que cual es la operacion  qu va hacer el usuario
        this.opc = op;


        switch (op) {

            case ALTA:
                asistencia = new Asistencia();
                asistencia.setEmpleado(empleado);
                asistencia.setFecha(fechaHoy);

                asistencia.setNturno((byte) 1); // cantidad de marcaciones en el dia
                asistencia.setMcontador((byte) 1); // 1 si es entrada .0 salida
                opcMarcacion=ALTA;
                cargarOactualizarMarcacion(ALTA);

                break;
            case MODIFICAR:
                // marcar salida
                System.err.println("asistenica contador " + asistencia.getMcontador() + MARCACION_SALIDA);
                if (isMarcacionEntrda(asistencia)) {
                    // marca una nueva maracion en la asistencia
                    System.err.println("nueva marcacion en el dia de dd");
                    byte nturno = (byte) (asistencia.getNturno() + 1);
                    asistencia.setNturno(nturno);
                    asistencia.setMcontador(MARCACION_ENTRADA);

                    //MARCACION
                    opcMarcacion=ALTA;
                    cargarOactualizarMarcacion(ALTA);
                    System.err.println("nueva marcacion en el dia");
                } else {
                    //marca salida de una marcacion existente 

                    System.err.println("marcacion de salida ");
                    asistencia.setMcontador(MARCACION_SALIDA);
                    //MARCACION
                    opcMarcacion=MODIFICAR;
                    cargarOactualizarMarcacion(MODIFICAR);
                }
                break;

            case EXTRA_MARCACION_ADICIONAL_EN_EL_DIA:
                
                // marcar 
                System.err.println("Y A TIENE LAS MARCACIONES DIARIAS INGRESAR UNA NUEVA EN EL MISMO DIA");
                // mostrar la venana de opciones 
                if (asistencia.getMcontador() == MARCACION_SALIDA) {

                    if (isIngresoOpcionEnVenanaMotivos(MOTIVO_HS_EXTRA, empleado.getSector().getSid())) {
                        // marca una nueva maracion en la asistencia
                        System.err.println("nueva marcacion en el dia de dd");
                        byte nturno = (byte) (asistencia.getNturno() + 1);
                        asistencia.setNturno(nturno);
                        asistencia.setMcontador(MARCACION_ENTRADA);

                        //MARCACION
                        cargarOactualizarMarcacionExtra(ALTA);

                        System.err.println("nueva marcacion en el dia");
                    }
                } else {
                    //marca salida de una marcacion existente 
                    System.err.println("marcacion de salida ");
                    asistencia.setMcontador(MARCACION_SALIDA);
                    //MARCACION
                    cargarOactualizarMarcacionExtra(MODIFICAR);

                }
                break;

            case EXTRA_MARCACION_DIA_NO_REGISTRADA:
                // marcar salida
                System.err.println("INGRESA UNA MARCACION EN EL DIA QUE NO LE CORRESPONDE TRABJAR");


                if (!isExistAsistenciaHoy()) {
                    System.err.println("alta extra dia");
                     extraM=false;
                    cargaOActualizarAsistenciaExtra(ALTA);
                    
                } else {
                    System.err.println("modificar extra dia");
                     extraM=true;
                    cargaOActualizarAsistenciaExtra(MODIFICAR);
                    
                }

                break;



        }





    }

    /**
     *
     * @param a asistenica
     * @return true si la asistenicia que se va a cargar es una marcacion de
     * ENTRADA
     *
     */
    public boolean isMarcacionEntrda(Asistencia a) {
        boolean b = false;
        if (a.getMcontador() == MARCACION_SALIDA) {
            b = true;
        }
        return b;
    }

    /**
     * Carga o Actualiza una Marcacion segun el parametro recibido
     *
     * @param op
     */
    private void cargarOactualizarMarcacion(int op) {

        switch (op) {

            case ALTA:
                // agregar una marcacion nueva
                marcacion = new Marcacion();
                marcacion.setAsistencia(asistencia);
                marcacion.setEntrada(fechaHoy);
                marcacion.setEstado(false);
                // calculo de la tolerancias
                marcacion.setEtimarcacion(ETI_MARCACION_INCOMPLETA);
                // obtengo el turno para la marcacion actual.

                cargarYControlarMinutosTolerancias(MARCACION_ENTRADA);
                // carga el motivo de la tardanza o extra
                

                break;

            case MODIFICAR:

                // marco la salida de la marcacion existente
                marcacion = new MarcacionDaoImp().getUtlimaMarcacionIncompleta(asistencia.getAid());
                marcacion.setSalida(fechaHoy);
                marcacion.setEstado(true);// indico q se completo la marcacion entrada-salida
                // caluclo de las tolerancias
                marcacion.setEtimarcacion(ETI_MARCACION_NORMAL);
                cargarYControlarMinutosTolerancias(MARCACION_SALIDA);

                

                break;
        }



    }

    /**
     * limpia todas las variables utilizadas en la marcacion limpia el id
     * ingresado y coloca el foco en el
     */
    private void limpiarDatos() {
        txtDni.requestFocus();
        txtDni.setText("");
        asistencia = null;
        empleado = null;
        horario = null;
        turno = null;
        diaTrabajo = null;
        marcacion = null;
        
    }

    /**
     *
     * @param op indica si es maracion de entrada o salida almacena en turno los
     * minutos de tolerancia y controla si se demoro
     *
     */
    private void cargarYControlarMinutosTolerancias(byte op) {
        turno = new TurnoDaoImp().getTurno(empleado.getEid(), diaTrabajo.getDtid(), asistencia.getNturno());
        horario = turno.getHorario();
        switch (op) {
            case MARCACION_ENTRADA:
                int minTolentrada = FechaUtil.getCantidadDeMinutos(horario.getEntrada(), fechaHoy);
                marcacion.setMintardanzae((short) minTolentrada);
                System.err.println("minutos de demora en la entrada " + minTolentrada);
                // si es una tardanza entonces debe alarmar el xq
                if (minTolentrada > Integer.parseInt(FechaUtil.getMM(turno.getEtolerancia()))) {
                    System.err.println("tardanza en la entrada");
                    // registrar el motivo de la tardanza
                    if (isIngresoOpcionEnVenanaMotivos(MOTIVO_TARDANZA, empleado.getSector().getSid())) {
                        // guardar asistencia y marcacion en la bd.
                        cargarMotivoAMarcacion(opcMarcacion);
                        almacenarEnBDD(this.opc);
                        
                    } else {
                        System.err.println("concelo la op");
                    }

                } else {
                    System.err.println("paso con normalidad el control de tolerancia");
                    almacenarEnBDD(this.opc);
                }

                break;
            case MARCACION_SALIDA:
                int minToleSalida = FechaUtil.getCantidadDeMinutos(horario.getSalida(), fechaHoy);
                marcacion.setMintardanzas((short) minToleSalida);
                System.err.println("minutos de demora en la salida " + minToleSalida);
                // si es una tardanza entonces debe alarmar el xq
                if (minToleSalida > Integer.parseInt(FechaUtil.getMM(turno.getStolerancia()))) {
                    System.err.println("tardanza en la Salida");
                    // registrar el motivo de la tardanza
                    if (isIngresoOpcionEnVenanaMotivos(MOTIVO_HS_EXTRA, empleado.getSector().getSid())) {
                        // guardar asistencia y marcacion en la bd.
                        cargarMotivoAMarcacion(opcMarcacion);
                        almacenarEnBDD(this.opc);
                    } else {
                        System.err.println("concelo la op");
                    }

                } else {
                    System.err.println("paso con normalidad el control de tolerancia");
                    almacenarEnBDD(this.opc);
                }
                break;

        }
    }

    /**
     * Captura una foto de la camara y lo guarda con extension jpeg. lugar del
     * archivo es en la carpeta dist
     */
    private void capturarYguardarFotoEmpleado() {
        //saco foto 
        b.capturarImagen();
        // detengo la camara
        b.getPlayer().stop();
        //1-guardo en fichero :crea img.jpeg donde se encuentra el .jar o sea en la carpeta dist 
        File file = new File(new File("img.jpeg").getAbsolutePath());
        miPlayer.guardaImagenEnFichero(b.getImagen(), file);

        try {
            // Detengo la aplicacion para que el usuario vea su foto durante 2 segundos y luego reinicio la camara
            Thread.sleep(2000);
        } catch (InterruptedException ex) {
            Logger.getLogger(GUIMarcacion.class.getName()).log(Level.SEVERE, null, ex);
        }
        // reanudo la camara
        b.getPlayer().start();
    }

    /**
     *
     * @return verdadero si el empleado ingreso o salio tarde
     */
    private boolean isllegoTardeEmpleado() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void cargarMotivoAMarcacion(int op) {
        if (op == ALTA) {
            marcacion.setEtolerancia((byte) indexMotivo);
            System.err.println("entro alta motivo marcacion");
        } else {
            marcacion.setStolerancia((byte) indexMotivo);

        }
    }

    private void cargarOactualizarMarcacionExtra(int op) {
        switch (op) {

            case ALTA:
                // agregar una marcacion nueva
                marcacion = new Marcacion();
                marcacion.setAsistencia(asistencia);
                marcacion.setEntrada(fechaHoy);
                marcacion.setEstado(false);
                 cargarMotivoAMarcacion(op);
                //marcacion extra
                marcacion.setEtimarcacion(ETI_MARCACION_EXTRA);
                // tipo de extra
                if (!isExistDiaTrabajo()) {
                    // marcacion en un dia que no le corresponde
                    marcacion.setEtiextra(ETI_EXTRA_DIA);
                } else {
                    // marcacion adicional a su dia
                    marcacion.setEtiextra(ETI_EXTRA_MARCACION);
                }


                // NO SE REALIZA CONTROLES DE TOLERANCIAS PARA LAS EXTRAS
               // actulizar asi no crea asistencia
                // debo preguntar si es extra por el mismo dia o de otro dia
                if (extraM) {
                    // mismo dia
                     almacenarEnBDD(MODIFICAR);
                } else {
                    //otro dia
                     almacenarEnBDD(ALTA);
                }
               


                break;

            case MODIFICAR:

                // marco la salida de la marcacion existente
                marcacion = new MarcacionDaoImp().getUtlimaMarcacionIncompleta(asistencia.getAid());
                marcacion.setSalida(fechaHoy);
                marcacion.setEstado(true);// indico q se completo la marcacion entrada-salida
                cargarMotivoAMarcacion(op);
                almacenarEnBDD(MODIFICAR);


                break;
        }

    }

    /**
     * gestiona la asistencias que se cargan en un dia que no asignado al
     * empleado
     */
    private void cargaOActualizarAsistenciaExtra(int opc) {
        switch (opc) {
            case ALTA:
                // creo una asistencia
                asistencia = new Asistencia();
                asistencia.setEmpleado(empleado);
                asistencia.setFecha(fechaHoy);
                asistencia.setNturno((byte) 1); // cantidad de marcaciones en el dia
                asistencia.setMcontador((byte) 1); // 1 si es entrada .0 salida

                cargarOactualizarMarcacionExtra(ALTA);


                break;

            case MODIFICAR:
                //modifico la asistencia
                if (asistencia.getMcontador() == MARCACION_SALIDA) {
                    // marca una nueva maracion en la asistencia
                    System.err.println("nueva marcacion en el dia de dd");
                    byte nturno = (byte) (asistencia.getNturno() + 1);
                    asistencia.setNturno(nturno);
                    asistencia.setMcontador(MARCACION_ENTRADA);

                    //MARCACION
                    cargarOactualizarMarcacionExtra(ALTA);
                    System.err.println("nueva marcacion en el dia");
                } else {
                    //marca salida de una marcacion existente 

                    System.err.println("marcacion de salida ");
                    asistencia.setMcontador(MARCACION_SALIDA);
                    //MARCACION
                    cargarOactualizarMarcacionExtra(MODIFICAR);
                }
                break;
        }






    }

    private class eventos implements WindowListener, ActionListener {

        private GUIMarcacion padre;

        public eventos(GUIMarcacion padre) {
            this.padre = padre;
        }

        public void windowOpened(WindowEvent e) {
        }

        public void windowClosing(WindowEvent e) {
            miPlayer.detenerPlayer(padre.getPlayer());
        }

        public void windowClosed(WindowEvent e) {
        }

        public void windowIconified(WindowEvent e) {
        }

        public void windowDeiconified(WindowEvent e) {
        }

        public void windowActivated(WindowEvent e) {
        }

        public void windowDeactivated(WindowEvent e) {
        }

        public void actionPerformed(ActionEvent e) {
            if (e.getActionCommand().equals("En Archivo")) {
//                miPlayer.guardaImagenEnFichero(miPlayer.capturaFoto(padre.getPlayer()), guardaComo.verDialogo(padre));
            } else if (e.getActionCommand().equals("En Base de Datos")) {
//                miPlayer.guardaImagenEnBD(miPlayer.capturaFoto(padre.getPlayer()));
            } else if (e.getActionCommand().equals("Salir")) {
                miPlayer.detenerPlayer(padre.getPlayer());
//            System.exit(0);
                int opc;
                opc = JOptionPane.showConfirmDialog(null, "Esta seguro de Salir de la Aplicacion", "Salir", JOptionPane.YES_NO_OPTION);
                if (opc == JOptionPane.YES_OPTION) {
                    System.exit(0);
                }
            }
//                else if (e.getActionCommand().equals("Acerca")) {
//                new jacerca(padre, true).setVisible(true);
//            }


        }
    }

    /**
     *
     * @param idSector muestra una ventana donde el empleado ingresa el motivo
     */
    public boolean isIngresoOpcionEnVenanaMotivos(String tipomotivo, int idSector) {
        boolean b = false;

        List<Comentario> lista = new ComentarioDaoImp().listarComentario(idSector);
        String[] listcomentarios = new String[lista.size() + 1];
        int i = 1;
        listcomentarios[0] = "Seleccione";
        for (Comentario comentario : lista) {
            listcomentarios[i] = comentario.getDescripcion();
            i++;
        }

        String motivo = (String) JOptionPane.showInputDialog(this, "SELECCIONE EL MOTIVO", tipomotivo, JOptionPane.INFORMATION_MESSAGE, null, listcomentarios, listcomentarios[0]);


        if (motivo == null) {
            // cancelo operacion
            MiJoptionPane.mensajeError(this, "NO SE REGISTRO SU ASISTENCIA ");
        } else if (motivo == "Seleccione") {
            // no seleccioo el motivo
            MiJoptionPane.mensajeAdvertencia(this, "SELECCIONE UN MOTIVO PARA COMPLETAR SU REGISTRO DE ASISTENCIA");
            isIngresoOpcionEnVenanaMotivos(tipomotivo, idSector);
        } else {
            // ingreso motivo 
            b = true;
            indexMotivo = new ComentarioDaoImp().getComentario(idSector, motivo).getCid();
            System.err.println("motivo de la hora extra"+motivo+" "+indexMotivo);
        }

        return b;
    }

    /**
     *
     * @param opc tipo de maracion que se realizara ALTA MODIFICAR EXTRA_M
     * EXTRA_M almacena
     */
    public void almacenarEnBDD(int opc) {
        switch (opc) {

            case ALTA:
                new AsistenciaDaoImp().addAsistencia(asistencia);
                System.err.println("Alta asistencia OK");
                new MarcacionDaoImp().addMarcacion(marcacion);
                System.err.println("Alta   Marcacion OK");
                capturarYguardarFotoEmpleado();
                MiJoptionPane.MarcacionEmpleado(this, empleado.getApellido() + " " + empleado.getNombre(), MiJoptionPane.MARCACION_ENTRADA, FechaUtil.getHora_HHMM(fechaHoy));

                break;

            case MODIFICAR:
                if (asistencia.getMcontador() == MARCACION_SALIDA) {
                    new AsistenciaDaoImp().upDateAsistencia(asistencia);
                    System.err.println("Modificacion  asistencia OK");
                    //MARCACION
                    new MarcacionDaoImp().upDateMarcacion(marcacion);
                    System.err.println("Modificacion   Marcacion OK");
                    capturarYguardarFotoEmpleado();
                    MiJoptionPane.MarcacionEmpleado(this, empleado.getApellido() + " " + empleado.getNombre(), MiJoptionPane.MARCACION_SALIDA, FechaUtil.getHora_HHMM(fechaHoy));

                } else {
                    new AsistenciaDaoImp().upDateAsistencia(asistencia);
                    System.err.println("Modificacion  asistencia OK");
                    //MARCACION
                    new MarcacionDaoImp().addMarcacion(marcacion);
                    System.err.println("alta  Marcacion OK");
                    capturarYguardarFotoEmpleado();
                    MiJoptionPane.MarcacionEmpleado(this, empleado.getApellido() + " " + empleado.getNombre(), MiJoptionPane.MARCACION_ENTRADA, FechaUtil.getHora_HHMM(fechaHoy));

                }
                break;

            case EXTRA_MARCACION_ADICIONAL_EN_EL_DIA:

                break;

            case EXTRA_MARCACION_DIA_NO_REGISTRADA:
                break;


        }
        // guardar la foto


    }
}
